// Code generated by protoc-gen-go. DO NOT EDIT.
// source: messagepb/message.proto

package messagepb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ClientRequest struct {
	ClientMessage        string   `protobuf:"bytes,1,opt,name=ClientMessage,proto3" json:"ClientMessage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientRequest) Reset()         { *m = ClientRequest{} }
func (m *ClientRequest) String() string { return proto.CompactTextString(m) }
func (*ClientRequest) ProtoMessage()    {}
func (*ClientRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d4f3249a385fa58, []int{0}
}

func (m *ClientRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientRequest.Unmarshal(m, b)
}
func (m *ClientRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientRequest.Marshal(b, m, deterministic)
}
func (m *ClientRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientRequest.Merge(m, src)
}
func (m *ClientRequest) XXX_Size() int {
	return xxx_messageInfo_ClientRequest.Size(m)
}
func (m *ClientRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClientRequest proto.InternalMessageInfo

func (m *ClientRequest) GetClientMessage() string {
	if m != nil {
		return m.ClientMessage
	}
	return ""
}

type ServerResponse struct {
	ServerMessage        string   `protobuf:"bytes,1,opt,name=ServerMessage,proto3" json:"ServerMessage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServerResponse) Reset()         { *m = ServerResponse{} }
func (m *ServerResponse) String() string { return proto.CompactTextString(m) }
func (*ServerResponse) ProtoMessage()    {}
func (*ServerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d4f3249a385fa58, []int{1}
}

func (m *ServerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServerResponse.Unmarshal(m, b)
}
func (m *ServerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServerResponse.Marshal(b, m, deterministic)
}
func (m *ServerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerResponse.Merge(m, src)
}
func (m *ServerResponse) XXX_Size() int {
	return xxx_messageInfo_ServerResponse.Size(m)
}
func (m *ServerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ServerResponse proto.InternalMessageInfo

func (m *ServerResponse) GetServerMessage() string {
	if m != nil {
		return m.ServerMessage
	}
	return ""
}

func init() {
	proto.RegisterType((*ClientRequest)(nil), "ClientRequest")
	proto.RegisterType((*ServerResponse)(nil), "ServerResponse")
}

func init() { proto.RegisterFile("messagepb/message.proto", fileDescriptor_1d4f3249a385fa58) }

var fileDescriptor_1d4f3249a385fa58 = []byte{
	// 157 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcf, 0x4d, 0x2d, 0x2e,
	0x4e, 0x4c, 0x4f, 0x2d, 0x48, 0xd2, 0x87, 0xb2, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x95, 0x4c,
	0xb9, 0x78, 0x9d, 0x73, 0x32, 0x53, 0xf3, 0x4a, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84,
	0x54, 0x60, 0x02, 0xbe, 0x10, 0x75, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0xa8, 0x82, 0x4a,
	0x66, 0x5c, 0x7c, 0xc1, 0xa9, 0x45, 0x65, 0xa9, 0x45, 0x41, 0xa9, 0xc5, 0x05, 0xf9, 0x79, 0xc5,
	0xa9, 0x20, 0x7d, 0x10, 0x11, 0x34, 0x7d, 0x28, 0x82, 0x46, 0xf6, 0x5c, 0x3c, 0xce, 0xf9, 0x79,
	0x65, 0xa9, 0x45, 0xc5, 0x89, 0x25, 0x99, 0xf9, 0x79, 0x42, 0xfa, 0x5c, 0x1c, 0xc1, 0x05, 0xa9,
	0x89, 0xd9, 0x99, 0x79, 0xe9, 0x42, 0x7c, 0x7a, 0x28, 0x2e, 0x91, 0xe2, 0xd7, 0x43, 0xb5, 0x42,
	0x89, 0xc1, 0x80, 0xd1, 0x89, 0x3b, 0x8a, 0x13, 0xee, 0x95, 0x24, 0x36, 0xb0, 0x1f, 0x8c, 0x01,
	0x01, 0x00, 0x00, 0xff, 0xff, 0xe6, 0xf8, 0xcd, 0xc3, 0xde, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ConversationClient is the client API for Conversation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConversationClient interface {
	Speaking(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (Conversation_SpeakingClient, error)
}

type conversationClient struct {
	cc *grpc.ClientConn
}

func NewConversationClient(cc *grpc.ClientConn) ConversationClient {
	return &conversationClient{cc}
}

func (c *conversationClient) Speaking(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (Conversation_SpeakingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Conversation_serviceDesc.Streams[0], "/Conversation/Speaking", opts...)
	if err != nil {
		return nil, err
	}
	x := &conversationSpeakingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Conversation_SpeakingClient interface {
	Recv() (*ServerResponse, error)
	grpc.ClientStream
}

type conversationSpeakingClient struct {
	grpc.ClientStream
}

func (x *conversationSpeakingClient) Recv() (*ServerResponse, error) {
	m := new(ServerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConversationServer is the server API for Conversation service.
type ConversationServer interface {
	Speaking(*ClientRequest, Conversation_SpeakingServer) error
}

// UnimplementedConversationServer can be embedded to have forward compatible implementations.
type UnimplementedConversationServer struct {
}

func (*UnimplementedConversationServer) Speaking(req *ClientRequest, srv Conversation_SpeakingServer) error {
	return status.Errorf(codes.Unimplemented, "method Speaking not implemented")
}

func RegisterConversationServer(s *grpc.Server, srv ConversationServer) {
	s.RegisterService(&_Conversation_serviceDesc, srv)
}

func _Conversation_Speaking_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ClientRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConversationServer).Speaking(m, &conversationSpeakingServer{stream})
}

type Conversation_SpeakingServer interface {
	Send(*ServerResponse) error
	grpc.ServerStream
}

type conversationSpeakingServer struct {
	grpc.ServerStream
}

func (x *conversationSpeakingServer) Send(m *ServerResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Conversation_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Conversation",
	HandlerType: (*ConversationServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Speaking",
			Handler:       _Conversation_Speaking_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "messagepb/message.proto",
}
