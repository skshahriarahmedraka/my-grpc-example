// Code generated by protoc-gen-go. DO NOT EDIT.
// source: messagepb/message.proto

package messagepb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SpeakRequest struct {
	Client_Request       string   `protobuf:"bytes,1,opt,name=Client_Request,json=ClientRequest,proto3" json:"Client_Request,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpeakRequest) Reset()         { *m = SpeakRequest{} }
func (m *SpeakRequest) String() string { return proto.CompactTextString(m) }
func (*SpeakRequest) ProtoMessage()    {}
func (*SpeakRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d4f3249a385fa58, []int{0}
}

func (m *SpeakRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpeakRequest.Unmarshal(m, b)
}
func (m *SpeakRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpeakRequest.Marshal(b, m, deterministic)
}
func (m *SpeakRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpeakRequest.Merge(m, src)
}
func (m *SpeakRequest) XXX_Size() int {
	return xxx_messageInfo_SpeakRequest.Size(m)
}
func (m *SpeakRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SpeakRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SpeakRequest proto.InternalMessageInfo

func (m *SpeakRequest) GetClient_Request() string {
	if m != nil {
		return m.Client_Request
	}
	return ""
}

type SpeakResponse struct {
	Server_Response      string   `protobuf:"bytes,1,opt,name=Server_Response,json=ServerResponse,proto3" json:"Server_Response,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpeakResponse) Reset()         { *m = SpeakResponse{} }
func (m *SpeakResponse) String() string { return proto.CompactTextString(m) }
func (*SpeakResponse) ProtoMessage()    {}
func (*SpeakResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d4f3249a385fa58, []int{1}
}

func (m *SpeakResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpeakResponse.Unmarshal(m, b)
}
func (m *SpeakResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpeakResponse.Marshal(b, m, deterministic)
}
func (m *SpeakResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpeakResponse.Merge(m, src)
}
func (m *SpeakResponse) XXX_Size() int {
	return xxx_messageInfo_SpeakResponse.Size(m)
}
func (m *SpeakResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SpeakResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SpeakResponse proto.InternalMessageInfo

func (m *SpeakResponse) GetServer_Response() string {
	if m != nil {
		return m.Server_Response
	}
	return ""
}

func init() {
	proto.RegisterType((*SpeakRequest)(nil), "Message.SpeakRequest")
	proto.RegisterType((*SpeakResponse)(nil), "Message.SpeakResponse")
}

func init() { proto.RegisterFile("messagepb/message.proto", fileDescriptor_1d4f3249a385fa58) }

var fileDescriptor_1d4f3249a385fa58 = []byte{
	// 174 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcf, 0x4d, 0x2d, 0x2e,
	0x4e, 0x4c, 0x4f, 0x2d, 0x48, 0xd2, 0x87, 0xb2, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0xd8,
	0x7d, 0x21, 0x5c, 0x25, 0x53, 0x2e, 0x9e, 0xe0, 0x82, 0xd4, 0xc4, 0xec, 0xa0, 0xd4, 0xc2, 0xd2,
	0xd4, 0xe2, 0x12, 0x21, 0x55, 0x2e, 0x3e, 0xe7, 0x9c, 0xcc, 0xd4, 0xbc, 0x92, 0x78, 0xa8, 0x88,
	0x04, 0xa3, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x2f, 0x44, 0x14, 0x2a, 0xa8, 0x64, 0xc1, 0xc5, 0x0b,
	0xd5, 0x56, 0x5c, 0x90, 0x9f, 0x57, 0x9c, 0x2a, 0xa4, 0xce, 0xc5, 0x1f, 0x9c, 0x5a, 0x54, 0x96,
	0x5a, 0x14, 0x0f, 0x13, 0x82, 0x6a, 0xe4, 0x83, 0x08, 0xc3, 0x44, 0x8d, 0xbc, 0xb9, 0x78, 0x9c,
	0xf3, 0xf3, 0xca, 0x52, 0x8b, 0x8a, 0x13, 0x4b, 0x32, 0xf3, 0xf3, 0x84, 0xac, 0xb9, 0x38, 0xc0,
	0x26, 0x65, 0xe6, 0xa5, 0x0b, 0x89, 0xea, 0x41, 0x9d, 0xa5, 0x87, 0xec, 0x26, 0x29, 0x31, 0x74,
	0x61, 0x88, 0x51, 0x4a, 0x0c, 0x4e, 0xdc, 0x51, 0x9c, 0x70, 0x1f, 0x26, 0xb1, 0x81, 0xbd, 0x66,
	0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xee, 0xf4, 0xa5, 0xef, 0xf5, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ConversationClient is the client API for Conversation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConversationClient interface {
	Speaking(ctx context.Context, in *SpeakRequest, opts ...grpc.CallOption) (*SpeakResponse, error)
}

type conversationClient struct {
	cc *grpc.ClientConn
}

func NewConversationClient(cc *grpc.ClientConn) ConversationClient {
	return &conversationClient{cc}
}

func (c *conversationClient) Speaking(ctx context.Context, in *SpeakRequest, opts ...grpc.CallOption) (*SpeakResponse, error) {
	out := new(SpeakResponse)
	err := c.cc.Invoke(ctx, "/Message.Conversation/Speaking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConversationServer is the server API for Conversation service.
type ConversationServer interface {
	Speaking(context.Context, *SpeakRequest) (*SpeakResponse, error)
}

// UnimplementedConversationServer can be embedded to have forward compatible implementations.
type UnimplementedConversationServer struct {
}

func (*UnimplementedConversationServer) Speaking(ctx context.Context, req *SpeakRequest) (*SpeakResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Speaking not implemented")
}

func RegisterConversationServer(s *grpc.Server, srv ConversationServer) {
	s.RegisterService(&_Conversation_serviceDesc, srv)
}

func _Conversation_Speaking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpeakRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServer).Speaking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Message.Conversation/Speaking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServer).Speaking(ctx, req.(*SpeakRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Conversation_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Message.Conversation",
	HandlerType: (*ConversationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Speaking",
			Handler:    _Conversation_Speaking_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "messagepb/message.proto",
}
